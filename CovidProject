
--Checking to see if datasets imported correctly
SELECT *
FROM `sql-project-310818.Covid_data.CovidDeaths`
ORDER BY 3,4

SELECT *
FROM `sql-project-310818.Covid_data.CovidVaccinations`
ORDER BY 3,4

--Selecting data that I'm going to use
SELECT location, date, total_cases, new_cases, total_deaths, population
FROM `sql-project-310818.Covid_data.CovidDeaths`
ORDER BY  1,2

-- looking at Total Cases vs Total Deaths for USA
SELECT location, date, total_cases, total_deaths, (total_deaths/total_cases)*100 as DeathPercentage
FROM `sql-project-310818.Covid_data.CovidDeaths`
WHERE location = "United States"
ORDER BY 1,2

-- looking at Total Cases vs Total Deaths for Chile
SELECT location, date, total_cases, total_deaths, (total_deaths/total_cases)*100 as DeathPercentage
FROM `sql-project-310818.Covid_data.CovidDeaths`
WHERE location = "Chile"
ORDER BY 1,2


--Total Cases vs Population USA 
--Shows what percentage of population got Covid
SELECT location, date, total_cases, population, (total_cases/population)*100 as PercentPopulationInfected
FROM `sql-project-310818.Covid_data.CovidDeaths`
WHERE location = "United States"
ORDER BY 1,2

--Total Cases vs Population Chile
SELECT location, date, total_cases, population, (total_cases/population)*100 as PercentPopulationInfected
FROM `sql-project-310818.Covid_data.CovidDeaths`
WHERE location = "Chile"
ORDER BY 1,2

--Total Cases vs Population World
SELECT location, date, total_cases, population, (total_cases/population)*100 as PercentPopulationInfected
FROM `sql-project-310818.Covid_data.CovidDeaths`
ORDER BY 1,2

--Looking at Countries with Highest Infection Rate compared to Population
SELECT location, population, MAX(total_cases) as HighestInfectionCount, Max((total_cases/population)*100) as PercentPopulationInfected
FROM `sql-project-310818.Covid_data.CovidDeaths`
GROUP BY location, population
ORDER BY PercentPopulationInfected desc 


--Showing Countries with the Highest Death Count Per Population
SELECT location, MAX(total_deaths) as TotalDeathCount
FROM `sql-project-310818.Covid_data.CovidDeaths`
WHERE continent is not null --added because some locations are also continent
GROUP BY location
ORDER BY TotalDeathCount desc 

--Show which countries had the highest death rate compared to population
SELECT location, population, MAX(total_deaths) as HighestDeathCount, MAX((total_deaths/population)*100) as PercentPopulationDeaths
FROM `sql-project-310818.Covid_data.CovidDeaths`
WHERE continent is not null 
GROUP BY location, population
ORDER BY PercentPopulationDeaths desc 


-- Breaking things down by continent and the world
SELECT location, MAX(total_deaths) as TotalDeathCount
FROM `sql-project-310818.Covid_data.CovidDeaths`
WHERE continent is null 
GROUP BY location
ORDER BY TotalDeathCount desc 

SELECT continent, MAX(total_deaths) as TotalDeathCount
FROM `sql-project-310818.Covid_data.CovidDeaths`
WHERE continent is not null 
GROUP BY continent
ORDER BY TotalDeathCount desc 



-- Global Numbers
SELECT date, SUM(new_cases) as TotalCases, SUM(new_deaths) as TotalDeaths, (SUM(new_deaths)/SUM(new_cases)) *100 as DeathPercentage
FROM `sql-project-310818.Covid_data.CovidDeaths`
WHERE continent is not null 
GROUP BY date
ORDER BY 1,2

SELECT SUM(new_cases) as TotalCases, SUM(new_deaths) as TotalDeaths, (SUM(new_deaths)/SUM(new_cases)) *100 as DeathPercentage
FROM `sql-project-310818.Covid_data.CovidDeaths`
WHERE continent is not null 
ORDER BY 1,2



-----JOIN
SELECT *
FROM `sql-project-310818.Covid_data.CovidDeaths` dea
JOIN `sql-project-310818.Covid_data.CovidVaccinations` vac
    ON dea.location = vac.location
    AND dea.date = vac.date



---Looking at Total Popluation vs. Vaccinations, with a column that adds up new vax
SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations, SUM(vac.new_vaccinations) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) as RollingVaxCount
FROM `sql-project-310818.Covid_data.CovidDeaths` dea
JOIN `sql-project-310818.Covid_data.CovidVaccinations` vac
    ON dea.location = vac.location
    AND dea.date = vac.date
WHERE  dea.continent is not null
ORDER BY 2,3


-- Using a CTE
WITH PopulationVsVaccination--(continent, location, date, population, new_vaccinations, RollingVaxCount)
AS (
    SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations, SUM(vac.new_vaccinations) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) as RollingVaxCount
    FROM `sql-project-310818.Covid_data.CovidDeaths` dea
    JOIN `sql-project-310818.Covid_data.CovidVaccinations` vac
        ON dea.location = vac.location
        AND dea.date = vac.date
    WHERE  dea.continent is not null
--ORDER BY 2,3
)

SELECT *, (RollingVaxCount/population) *100 AS VaxPercentage
FROM PopulationVsVaccination




--Temp Table
CREATE TEMP TABLE PercentPopVax
(
    continent string,
    location string,
    date datetime,
    population numeric,
    new_vaccinations numeric,
    RollingPeopleVaccinated numeric

);
INSERT INTO PercentPopVax
SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations, SUM(vac.new_vaccinations) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) as RollingVaxCount
    FROM `sql-project-310818.Covid_data.CovidDeaths` dea
    JOIN `sql-project-310818.Covid_data.CovidVaccinations` vac
        ON dea.location = vac.location
        AND dea.date = vac.date
    WHERE  dea.continent is not null;

SELECT *, (RollingPeopleVaccinated/population) *100 AS VaxPercentage
FROM PercentPopVax;
